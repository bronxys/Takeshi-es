const { PREFIX } = require(`${BASE_DIR}/config`);
const { delay } = require("baileys");

module.exports = {
  name: "samples-of-messages",
  description:
    "Lista todos los ejemplos disponibles de env√≠o de mensajes para desarrolladores",
  commands: ["samples-of-messages", "sample-of-messages"],
  usage: `${PREFIX}samples-of-messages`,
  /**
   * @param {CommandHandleProps} props
   * @returns {Promise<void>}
   */
  handle: async ({ sendReply, sendReact }) => {
    await sendReact("üìö");

    await delay(2000);

    await sendReply(
      "*üìö EJEMPLOS DISPONIBLES*\n\n" +
        "Usa los comandos a continuaci√≥n para ver ejemplos pr√°cticos de c√≥mo usar mis comandos:"
    );

    await delay(2000);

    await sendReply(
      "*üîä AUDIO:*\n" +
        `‚Ä¢ \`${PREFIX}send-audio-from-file\` - Enviar audio desde archivo local\n` +
        `‚Ä¢ \`${PREFIX}send-audio-from-url\` - Enviar audio desde URL\n` +
        `‚Ä¢ \`${PREFIX}send-audio-from-buffer\` - Enviar audio desde buffer`
    );

    await delay(2000);

    await sendReply(
      "*üñºÔ∏è IMAGEN:*\n" +
        `‚Ä¢ \`${PREFIX}send-image-from-file\` - Enviar imagen desde archivo local\n` +
        `‚Ä¢ \`${PREFIX}send-image-from-url\` - Enviar imagen desde URL\n` +
        `‚Ä¢ \`${PREFIX}send-image-from-buffer\` - Enviar imagen desde buffer`
    );

    await delay(2000);

    await sendReply(
      "*üé¨ VIDEO:*\n" +
        `‚Ä¢ \`${PREFIX}send-video-from-file\` - Enviar video desde archivo local\n` +
        `‚Ä¢ \`${PREFIX}send-video-from-url\` - Enviar video desde URL\n` +
        `‚Ä¢ \`${PREFIX}send-video-from-buffer\` - Enviar video desde buffer`
    );

    await delay(2000);

    await sendReply(
      "*üéûÔ∏è GIF:*\n" +
        `‚Ä¢ \`${PREFIX}send-gif-from-file\` - Enviar GIF desde archivo local\n` +
        `‚Ä¢ \`${PREFIX}send-gif-from-url\` - Enviar GIF desde URL\n` +
        `‚Ä¢ \`${PREFIX}send-gif-from-buffer\` - Enviar GIF desde buffer`
    );

    await delay(2000);

    await sendReply(
      "*üè∑Ô∏è STICKER:*\n" +
        `‚Ä¢ \`${PREFIX}send-sticker-from-file\` - Enviar sticker desde archivo local\n` +
        `‚Ä¢ \`${PREFIX}send-sticker-from-url\` - Enviar sticker desde URL\n` +
        `‚Ä¢ \`${PREFIX}send-sticker-from-buffer\` - Enviar sticker desde buffer`
    );

    await delay(2000);

    await sendReply(
      "*üìä ENCUESTA:*\n" +
        `‚Ä¢ \`${PREFIX}send-poll\` - Enviar encuestas/votaciones (selecci√≥n √∫nica o m√∫ltiple)`
    );

    await delay(2000);

    await sendReply(
      "*üìÑ DOCUMENTO:*\n" +
        `‚Ä¢ \`${PREFIX}send-document-from-file\` - Enviar documento desde archivo local\n` +
        `‚Ä¢ \`${PREFIX}send-document-from-url\` - Enviar documento desde URL\n` +
        `‚Ä¢ \`${PREFIX}send-document-from-buffer\` - Enviar documento desde buffer`
    );

    await delay(2000);

    await sendReply(
      "*üí¨ TEXTO Y RESPUESTAS:*\n" +
        `‚Ä¢ \`${PREFIX}send-text\` - Enviar texto (con/sin menci√≥n)\n` +
        `‚Ä¢ \`${PREFIX}send-quoted\` - Responder mensajes (con/sin menci√≥n)\n` +
        `‚Ä¢ \`${PREFIX}send-reaction\` - Enviar reacciones (emojis)`
    );

    await delay(2000);

    await sendReply(
      "*üìä DATOS Y METADATOS:*\n" +
        `‚Ä¢ \`${PREFIX}get-group-data\` - Obtener datos del grupo (nombre, due√±o, participantes)\n` +
        `‚Ä¢ \`${PREFIX}get-message-data\` - Obtener metadatos del mensaje\n` +
        `‚Ä¢ \`${PREFIX}group-functions\` - Funciones utilitarias de grupo (demostraci√≥n)\n` +
        `‚Ä¢ \`${PREFIX}raw-message\` - Obtener datos brutos del mensaje`
    );

    await delay(2000);

    await sendReply(
      "*üéØ C√ìMO USAR:*\n\n" +
        "1Ô∏è‚É£ Ejecuta cualquier comando de la lista anterior\n" +
        "2Ô∏è‚É£ Observa el comportamiento pr√°ctico\n" +
        "3Ô∏è‚É£ Revisa el c√≥digo fuente en `/src/commands/member/exemplos/`\n" +
        "4Ô∏è‚É£ √ösalo como base para tus propios comandos\n\n" +
        "*üí° Consejo:* ¬°Todos los ejemplos incluyen explicaciones detalladas y casos de uso!"
    );

    await delay(2000);

    await sendReply(
      "*üìù FUNCIONES DISPONIBLES:*\n\n" +
        "¬°Consulta el archivo `@types/index.d.ts` para la documentaci√≥n completa de todas las funciones disponibles con ejemplos de c√≥digo!"
    );
  },
};
