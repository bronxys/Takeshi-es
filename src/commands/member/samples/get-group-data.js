const { PREFIX } = require(`${BASE_DIR}/config`);
const { delay } = require("baileys");

module.exports = {
  name: "get-group-data",
  description: "Ejemplo de c√≥mo obtener informaci√≥n detallada del grupo",
  commands: ["get-group-data"],
  usage: `${PREFIX}get-group-data`,
  /**
   * @param {CommandHandleProps} props
   * @returns {Promise<void>}
   */
  handle: async ({
    sendReply,
    sendReact,
    sendErrorReply,
    getGroupMetadata,
    isGroup,
    socket,
    remoteJid,
  }) => {
    await sendReact("üë•");

    await delay(3000);

    if (!isGroup) {
      return await sendErrorReply("¬°Este comando solo funciona en grupos!");
    }

    await sendReply("Voy a obtener la informaci√≥n del grupo actual:");

    await delay(3000);

    try {
      const groupMetadata = await getGroupMetadata();

      const groupInfo = `üë• *Informaci√≥n del Grupo:*

üìù *B√°sico:*
‚Ä¢ Nombre: ${groupMetadata.subject}
‚Ä¢ Descripci√≥n: ${groupMetadata.desc || "Sin descripci√≥n"}
‚Ä¢ ID: ${groupMetadata.id}

üë§ *Participantes:*
‚Ä¢ Total: ${groupMetadata.participants.length} miembros
‚Ä¢ Admins: ${groupMetadata.participants.filter((p) => p.admin).length}
‚Ä¢ Miembros: ${groupMetadata.participants.filter((p) => !p.admin).length}

‚öôÔ∏è *Configuraci√≥n:*
‚Ä¢ Creado el: ${new Date(groupMetadata.creation * 1000).toLocaleDateString(
        "es-ES"
      )}
‚Ä¢ Due√±o: ${groupMetadata.owner || "N/A"}
‚Ä¢ Solo admins pueden enviar: ${groupMetadata.announce ? "S√≠" : "No"}
‚Ä¢ Aprobaci√≥n para unirse: ${groupMetadata.restrict ? "S√≠" : "No"}`;

      await sendReply(groupInfo);

      await delay(3000);

      const admins = groupMetadata.participants.filter((p) => p.admin);

      if (admins.length > 0) {
        const adminList =
          `üëë *Administradores (${admins.length}):*\n\n` +
          admins
            .map(
              (admin, index) =>
                `${index + 1}. @${admin.id.split("@")[0]} ${
                  admin.admin === "superadmin" ? "(Creador)" : "(Admin)"
                }`
            )
            .join("\n");

        await socket.sendMessage(remoteJid, {
          text: adminList,
          mentions: admins.map((admin) => admin.id),
        });
      }

      await delay(3000);

      await sendReply(
        "üí° *Funciones √∫tiles:*\n\n" +
          "‚Ä¢ `socket.groupMetadata(jid) o getGroupMetadata()` - Obtiene metadatos del grupo\n" +
          "‚Ä¢ `groupMetadata.participants` - Lista participantes\n" +
          "‚Ä¢ `groupMetadata.subject` - Nombre del grupo\n" +
          "‚Ä¢ `groupMetadata.desc` - Descripci√≥n del grupo"
      );
    } catch (error) {
      await sendErrorReply(
        `Error al obtener datos del grupo: ${error.message}`
      );
    }
  },
};
